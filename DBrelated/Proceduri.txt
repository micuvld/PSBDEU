create or replace 
PROCEDURE ACTUALIZARE_PRODUS 
(v_id IN produse.produse_id%TYPE, v_denumire IN produse.denumire%TYPE, v_pret IN produse.pret%TYPE)
is 
BEGIN
  UPDATE PRODUSE 
  SET denumire = v_denumire, pret = v_pret
  WHERE produse_id = v_id;
END ACTUALIZARE_PRODUS;
/

create or replace 
PROCEDURE GET_PRODUSE 
(v_cursor OUT SYS_REFCURSOR)
IS 
BEGIN
  open v_cursor for select * from produse;
END GET_PRODUSE;
/

create or replace 
PROCEDURE INSERARE_PRODUS 
(v_denumire IN produse.denumire%TYPE, 
v_pret IN produse.pret%TYPE)
IS
v_id produse.produse_id%TYPE;
BEGIN
  INSERT INTO produse(denumire, pret) VALUES (v_denumire, v_pret) RETURNING produse_id into v_id;
  
  INSERT INTO stocuri(numarbucati, produse_produse_id) VALUES (0, v_id);
END INSERARE_PRODUS;
/

create or replace 
PROCEDURE INSERARE_BON 
(v_data IN facturi.data%TYPE, v_cif IN facturi.cif%TYPE,
 v_numar_bucati IN  int_array,
 v_produse_id IN int_array)
IS
v_index NUMBER;
v_pret_produs produse.pret%TYPE;
v_suma NUMBER := 0;
v_id bonuri.bonuri_id%TYPE;
BEGIN
  FOR v_index IN 1..v_produse_id.COUNT LOOP
    SELECT pret INTO v_pret_produs FROM produse WHERE produse_id = v_produse_id(v_index);
    v_suma := v_suma + v_pret_produs * v_numar_bucati(v_index);
  END LOOP;

  INSERT INTO bonuri(data, cif, total) VALUES(v_data, v_cif, v_suma) RETURNING bonuri_id into v_id;
  
  FOR v_index IN 1..v_numar_bucati.COUNT LOOP
    INSERT INTO tranzactii_bonuri(produse_produse_id, numar_bucati, bonuri_bonuri_id) 
    values (v_produse_id(v_index), v_numar_bucati(v_index), v_id);
  END LOOP;
END INSERARE_BON;
/

create or replace 
PROCEDURE INSERARE_FACTURA 
(v_data IN facturi.data%TYPE, v_cif IN facturi.cif%TYPE,
 v_numar_bucati IN  int_array,
 v_produse_id IN int_array)
IS
v_index NUMBER;
v_pret_produs produse.pret%TYPE;
v_suma NUMBER := 0;
v_id facturi.facturi_id%TYPE;
BEGIN  
  FOR v_index IN 1..v_produse_id.COUNT LOOP
    SELECT pret INTO v_pret_produs FROM produse WHERE produse_id = v_produse_id(v_index);
    v_suma := v_suma + v_pret_produs * v_numar_bucati(v_index);
  END LOOP;
  
  INSERT INTO facturi(data, cif, total) VALUES(v_data, v_cif, v_suma) RETURNING facturi_id into v_id;
  
  FOR v_index IN 1..v_numar_bucati.COUNT LOOP
    INSERT INTO tranzactii_facturi(produse_produse_id, numar_bucati, facturi_facturi_id) 
    values (v_produse_id(v_index), v_numar_bucati(v_index), v_id);
  END LOOP;
END INSERARE_FACTURA;
/

CREATE OR REPLACE PROCEDURE GET_FACTURI_SI_BONURI 
(v_luna IN facturi.data%TYPE,v_cursor_facturi OUT SYS_REFCURSOR, v_cursor_bonuri OUT SYS_REFCURSOR)
IS
BEGIN
  OPEN v_cursor_facturi 
  FOR SELECT f.facturi_id, f.data, f.cif, f.total, t.numar_bucati, p.produse_id, p.denumire
    FROM facturi f
    INNER JOIN tranzactii_facturi t
    ON f.facturi_id = t.facturi_facturi_id
    INNER JOIN produse p
    ON t.produse_produse_id = p.produse_id
    WHERE to_char(f.data,'mm:yyyy') = to_char(v_luna, 'mm:yyyy');
    
  OPEN v_cursor_bonuri 
  FOR SELECT b.bonuri_id, b.data, b.cif, b.total, t.numar_bucati, p.produse_id, p.denumire
    FROM bonuri b
    INNER JOIN tranzactii_bonuri t
    ON b.bonuri_id = t.bonuri_bonuri_id
    INNER JOIN produse p
    ON t.produse_produse_id = p.produse_id
    WHERE to_char(b.data,'mm:yyyy') = to_char(v_luna, 'mm:yyyy');
END GET_FACTURI_SI_BONURI;